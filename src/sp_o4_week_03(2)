–í–æ–ø—Ä–æ—Å:

–û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —Ç—É–¥—É–ª–∏—Å—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–∞–º–∏, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –≤–∏–¥–∏—Ç –æ—à–∏–±–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleErrors –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.

–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handleErrors, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É–≤–∏–¥–µ–ª –æ—à–∏–±–∫–∏: 'Request failed with status code 404'

‚ùó –ö–æ–¥ —Ñ–∏–∫—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.

–í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:

const handleErrors = () => {

console.log("error")

}



import { useEffect } from "react"
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"
import axios from "axios"
import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
// Types
type Todolist = {
  id: string
  title: string
  order: number
  createdAt: string
  updatedAt: string
  completed: boolean
}
type User = {
  id: string
  name: string
  age: number
}
type UsersResponse = {
  items: User[]
  totalCount: number
}
// API
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
const api = {
  getTodos() {
    return instance.get<Todolist[]>("todo")
  },
  getUsers() {
    return instance.get<UsersResponse>("user")
  },
}
// Slice
const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
const slice = createAppSlice({
  name: "app",
  initialState: {
    todolists: [] as Todolist[],
    users: [] as User[],
    error: null as string | null,
  },
  selectors: {
    selectTodolists: (state) => state.todolists,
    selectUsers: (state) => state.users,
    selectError: (state) => state.error,
  },
  reducers: (create) => ({
    setError: create.reducer<{ error: string | null }>((state, action) => {
      state.error = action.payload.error
    }),
    fetchTodolists: create.asyncThunk(
      async (_arg, { dispatch, rejectWithValue }) => {
        try {
          const res = await api.getTodos()
          return { todolists: res.data }
        } catch (error: any) {
          handleErrors(dispatch, error.message)
          return rejectWithValue(null)
        }
      },
      {
        fulfilled: (state, action) => {
          state.todolists = action.payload.todolists
        },
      },
    ),
    fetchUsers: create.asyncThunk(
      async (_arg, { dispatch, rejectWithValue }) => {
        try {
          const res = await api.getUsers()
          return { users: res.data.items }
        } catch (error: any) {
          handleErrors(dispatch, error.message)
          return rejectWithValue(null)
        }
      },
      {
        fulfilled: (state, action) => {
          state.users = action.payload.users
        },
      },
    ),
  }),
})
const appReducer = slice.reducer
const { setError, fetchTodolists, fetchUsers } = slice.actions
const { selectTodolists, selectUsers, selectError } = slice.selectors
// Utils functions
const handleErrors = () => {
  console.log("error")
}
const App = () => {
  return (
    <>
      <h1>‚úÖTodos & üôÇUsers</h1>
      <div style={{ display: "flex", justifyContent: "space-evenly" }}>
        <Todos />
        <Users />
      </div>
    </>
  )
}
const Todos = () => {
  const dispatch = useAppDispatch()
  const todolists = useAppSelector(selectTodolists)
  const error = useAppSelector(selectError)
  useEffect(() => {
    dispatch(fetchTodolists())
  }, [])
  return (
    <div>
      <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
      {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
      {todolists.map((todolist) => (
        <div style={todolist.completed ? { color: "grey" } : {}} key={todolist.id}>
          <input type="checkbox" checked={todolist.completed} />
          <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todolist.title}
        </div>
      ))}
    </div>
  )
}
const Users = () => {
  const dispatch = useAppDispatch()
  const users = useAppSelector(selectUsers)
  const error = useAppSelector(selectError)
  useEffect(() => {
    dispatch(fetchUsers())
  }, [])
  return (
    <div>
      <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
      {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
      <div>
        {users.map((user) => (
          <div key={user.id}>
            <b>name</b>:{user.name} - <b>age</b>:{user.age}
          </div>
        ))}
      </div>
    </div>
  )
}
// Store
const store = configureStore({
  reducer: {
    [slice.name]: appReducer,
  },
})
type RootState = ReturnType<typeof store.getState>
type AppDispatch = typeof store.dispatch
const useAppDispatch = useDispatch.withTypes<AppDispatch>()
const useAppSelector = useSelector.withTypes<RootState>()
createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
)
// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —Ç—É–¥—É–ª–∏—Å—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–∞–º–∏,
// –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –≤–∏–¥–∏—Ç –æ—à–∏–±–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleErrors –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handleErrors, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É–≤–∏–¥–µ–ª –æ—à–∏–±–∫–∏:
// 'Request failed with status code 404'
//‚ùó –ö–æ–¥ —Ñ–∏–∫—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
